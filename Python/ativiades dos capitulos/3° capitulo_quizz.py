# -*- coding: utf-8 -*-
"""CAPÍTULO 3 - QUIZZ - SIC

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WWx9eRFQxxrYjwyCr9oEps7CrX7Spo2V
"""

# Exercício 1

import math as m

x1 = int(input("Escreva a coordenada x1 do primeiro ponto: "))
y1 = int(input("Escreva a coordenada y1 do primeiro ponto: "))
x2 = int(input("Escreva a coordenada x2 do segundo ponto: "))
y2 = int(input("Escreva a coordenada y2 do segundo ponto: "))

distancia = (((x2 - x1)**2) + ((y2 - y1)**2))**0.5

print("\nA distância entre esses dois pontos é: ", distancia)

# Exercício 2

palin = str(input("Insira uma frase ou palavra: "))
palin = palin.replace(" ", "").lower()

def verificar(palin):
  if len(palin) <= 1:
    return True
  if palin[0] != palin[-1]:
    return False
  return verificar(palin[1:-1])

if verificar(palin):
    print(palin, " é um palíndromo.")
else:
    print(palin, 'não é um palíndromo.')

# Exercício 3

n_list = [10, 20, 30]

def mult(dois_tres, x):
    return dois_tres * x

dois_x = list(map(lambda x: mult(2, x), n_list))
print("Valores da lista x2:", dois_x)

tres_x = list(map(lambda x: mult(3, x), n_list))
print("Valores da lista x3:", tres_x)

# Exercício 4

'''Obs: calc_digit(num) é chamado para cada valor de num de 1 a 5.

Para num = 1:
- calc_digit(1) retorna a função final(digit) onde final(digit) = digit**1
- num_list agora é [final] onde final(digit) = digit**1, ou seja, é 1**1, que resulta em 1 e imprime 1

Para num = 2:
- calc_digit(2) retorna a função final(digit) onde final(digit) = digit**2
- num_list agora é final(digit) = digit**2, ou seja, 2**2, que resulta em 4 e imprime 4

Para num = 3:
- calc_digit(3) retorna a função final(digit) onde final(digit) = digit**3
- num_list agora é final(digit) = digit**3, ou seja, 3**3, que resulta em 27 e imprime 27

Para num = 4:
- calc_digit(4) retorna a função final(digit) onde final(digit) = digit**4
- num_list agora é final(digit) = digit**4, ou seja, 4**4, que resulta em 256 e imprime 256

Para num = 5:
- calc_digit(5) retorna a função final(digit) onde final(digit) = digit**5
- num_list agora é final(digit) = digit**5, ou seja, 5**5, que resulta em 3125 e imprime 3125'''

# Exercício 5

class Vector:
  def __init__(self, x, y):
   self.x = x
   self.y = y

  def __mul__(self, other):
    return Vector(self.x * other.x, self.y * other.y)

  def __truediv__(self, other):
    return Vector(self.x / other.x, self.y / other.y)

  def __repr__(self):
        return f"({self.x}, {self.y})"

v1 = Vector(30, 40)
v2 = Vector(10, 20)

v3 = v1.__mul__(v2)
print("Resultado da multiplicação:", v3)
v4 = v1.__truediv__(v2)
print("Resultado da divisão:", v4)