# -*- coding: utf-8 -*-
"""CAPÍTULO 5 - QUIZZ - SIC

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AX12dzoHem30e0I0A3xLHQ8GfasN3yUc
"""

# Exercício 1
# Quantas comparações foram executadas no processo de ordenação abaixo? (Linha em negrito)

def bubblesort(S):
    n = len(S)
    comp = 0
    for i in range(n):
        print(S)
        for j in range(n-1):
            if S[j] > S[j + 1]:
                S[j], S[j + 1] = S[j + 1], S[j]
                comp += 1
    return comp

S = [50, 30, 40, 10, 20]
comp = bubblesort(S)
print(S)
print("Número de comparações:", comp)

# Resposta: 8 vezes

# Exercício 2
# Quantas comparações foram executadas no processo de ordenação abaixo? (Código em negrito)

def insertionsort2(S):
    n = len(S)
    comp = 0
    for i in range(1, n):
        print(S)
        x = S[i]
        j = i - 1
        while j >= 0 and S[j] > x:
          if S[j] > x:
            comp += 1
          S[j + 1] = S[j]
          j -= 1
        S[j + 1] = x
    return comp

S = [50, 30, 40, 10, 20]
comp = insertionsort2(S)
insertionsort2(S)
print(S)
print("Número de comparações:", comp)

# Resposta: 8 vezes

# Exercício 3
# Quantas vezes a função merge2() foi executada no processo de ordenação da fusão abaixo?

def mergesort2(S, low, high):
    if low < high:
        print(S)
        mid = (low + high) // 2
        mergesort2(S, low, mid)
        mergesort2(S, mid + 1, high)
        merge2(S, low, mid, high)

S = [6, 2, 11, 7, 5, 4, 8, 16, 10, 3]
mergesort2(S, 0, len(S) - 1)
print(S)

# Resposta: 9 vezes

# Exercício 4
# Dada a lista abaixo, escreva a saída após executar a função partition1().

def partition1(S, low, high):
    pivot = S[low]
    left, right = low + 1, high
    while left < right:
      print(S)
      while left <= right and S[left] <= pivot:
        left += 1
      while left <= right and S[right] >= pivot:
        right -= 1
      if left < right:
        S[left], S[right] = S[right], S[left]
    pivotpoint = right
    S[low], S[pivotpoint] = S[pivotpoint], S[low]
    return pivotpoint

S = [15, 10, 12, 20, 25, 13, 22]
partition1(S, 0, len(S) - 1)
print(S)

# Resposta:
# [15, 10, 12, 20, 25, 13, 22]
# [15, 10, 12, 13, 25, 20, 22]
# [13, 10, 12, 15, 25, 20, 22]