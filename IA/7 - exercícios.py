# -*- coding: utf-8 -*-
"""IA - exercícios

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hNzMjsyeMOxP0Vtx_BV69Pi3r-bI-HFD

**1) Em um estudo realizado pelo agrônomo Kakiboy foi avaliada a influência do “volume” de chuva, em mm, na produção de arroz, em toneladas, de uma região.**
"""

'''a - Qual a variável dependente e independente?
            Variável dependente é o ARROZ
            Variável independente é a CHUVA'''

# b - Faça um gráfico Produção de arroz x Volume de chuva.
import numpy as np
import matplotlib.pyplot as plt

X = np.array([
# y = b + ax
[	1	,	10]	,
[	1	,	20]	,
[	1	,	30]	,
[	1	,	40]	,
[	1	,	50]	,
[	1	,	60]	,
[	1	,	70]	,
[	1	,	80] ,
[	1	,	90]	,
[	1	,	100] ])

Y = np.array([
[2150]	,
[4100]	,
[5850]	,
[7400]	,
[8750]	,
[9900]	,
[10850]	,
[11600]	,
[12150]	,
[12500]	])

X_one = X

#################### Gráfico com os dados ##########################
plt.xlabel('Chuva')
plt.ylabel('Arroz')
plt.scatter(X[:,1],Y,c = 'purple', s=15, alpha=0.5)
plt.show()

# c - Faça o modelo linear para os dados pelo método dos mínimos quadrados. Avalie o modelo com os gráficos aprendidos nas aulas de IA.
import numpy as np
import matplotlib.pyplot as plt

X = np.array([
# y = b + ax
[	1	,	10]	,
[	1	,	20]	,
[	1	,	30]	,
[	1	,	40]	,
[	1	,	50]	,
[	1	,	60]	,
[	1	,	70]	,
[	1	,	80] ,
[	1	,	90]	,
[	1	,	100] ])

Y = np.array([
[2150]	,
[4100]	,
[5850]	,
[7400]	,
[8750]	,
[9900]	,
[10850]	,
[11600]	,
[12150]	,
[12500]	])

X_one = X
################################ Regressão Linear ###################
Xt = np.transpose(X)          # CRIA A TRANSPOSTA DA MATRIZ X (Xt)
XtX = np.matmul(Xt,X)         # MULTIPLICA Xt POR X
XtX_inv = np.linalg.inv(XtX)  # INVERTE (Xt*X)
XtY = np.matmul(Xt,Y)         # MULTIPLICA Xt POR Y
coef = np.matmul(XtX_inv,XtY) # TERMINA O CÁLCULO
print ("coeficientes b e a","", coef)
#####################################################################
print("")
Yprev = np.matmul(X_one,coef)
predY = Yprev
#################### Gráfico com os dados ##########################
plt.xlabel('Chuva')
plt.ylabel('Arroz')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados e reta ###################
plt.plot(X[:,1],Yprev,color='green',linewidth=1) #espessura
plt.xlabel('Chuva')
plt.ylabel('Arroz')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
################## Gráfico com os dados reais x previstos###########
plt.scatter(Y,predY,c = 'blue', s=15, alpha=0.5)
plt.xlabel('Chuva real')
plt.ylabel('Chuva prev')
plt.show ()
#################### Gráfico dos resíduos ##########################
residual = Y - Yprev
plt.scatter(Y,residual,c = 'red', s=15, alpha=0.5)
plt.xlabel('Y')
plt.ylabel('Residual')
plt.title('Residual')
plt.show()


################ Cálculo das Somas Quadráticas ####################
######################## Calcular média do vetor Y ################
Ymedio = np.mean (Y)
#print("valor médio do Y =", Ymedio)
######################### Soma Quadrática Total - SQT ############
SQT = sum((Y-Ymedio)**2)
######################## Soma Quadrática da Regressão - SQR ######
SQR =   sum(( Yprev - Ymedio)**2)
######################## Soma Quadrática dos erros - SQE #########
SQE =   sum ((Y-Yprev)**2)
SQER = SQR/SQT #porcentagem da soma quadrática explicada pela regressão
SQEE = SQE/SQT #porcentagem da soma quadrática do erro

print("Porcentagem da soma quadrática explicada pela regressão =", SQER*100)
print("Porcentagem da soma quadrática do erro =", SQEE*100)

# d - Faça o modelo quadrático para os dados pelo método dos mínimos quadrados. Avalie o modelo com os gráficos aprendidos nas aulas de IA.

import numpy as np
import matplotlib.pyplot as plt

X = np.array([
# y = b + ax
[	1	,	10, 100]	,
[	1	,	20, 400]	,
[	1	,	30, 900]	,
[	1	,	40, 1600]	,
[	1	,	50, 2500]	,
[	1	,	60, 3600]	,
[	1	,	70, 4900]	,
[	1	,	80, 6400] ,
[	1	,	90, 8100]	,
[	1	,	100, 10000] ])

Y = np.array([
[2150]	,
[4100]	,
[5850]	,
[7400]	,
[8750]	,
[9900]	,
[10850]	,
[11600]	,
[12150]	,
[12500]	])

X_one = X
################################ Regressão Linear ###################
Xt = np.transpose(X)          # CRIA A TRANSPOSTA DA MATRIZ X (Xt)
XtX = np.matmul(Xt,X)         # MULTIPLICA Xt POR X
XtX_inv = np.linalg.inv(XtX)  # INVERTE (Xt*X)
XtY = np.matmul(Xt,Y)         # MULTIPLICA Xt POR Y
coef = np.matmul(XtX_inv,XtY) # TERMINA O CÁLCULO
print ("coeficientes c, b a de ax**2 + b*x + c ","", coef)
#####################################################################
print("")
Yprev = np.matmul(X_one,coef)
predY = Yprev
#################### Gráfico com os dados ##########################
plt.xlabel('Chuva')
plt.ylabel('Arroz')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados e reta ###################
plt.plot(X[:,1],Yprev,color='green',linewidth=1) #espessura
plt.xlabel('Chuva')
plt.ylabel('Arroz')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
################## Gráfico com os dados reais x previstos###########
plt.scatter(Y,predY,c = 'blue', s=15, alpha=0.5)
plt.xlabel('Arroz real')
plt.ylabel('Arroz prev')
plt.show ()
#################### Gráfico dos resíduos ##########################
residual = Y - Yprev
plt.scatter(Y,residual,c = 'red', s=15, alpha=0.5)
plt.xlabel('Y')
plt.ylabel('Residual')
plt.title('Residual')
plt.show()


################ Cálculo das Somas Quadráticas ####################
######################## Calcular média do vetor Y ################
Ymedio = np.mean (Y)
#print("valor médio do Y =", Ymedio)
######################### Soma Quadrática Total - SQT ############
SQT = sum((Y-Ymedio)**2)
######################## Soma Quadrática da Regressão - SQR ######
SQR =   sum(( Yprev - Ymedio)**2)
######################## Soma Quadrática dos erros - SQE #########
SQE =   sum ((Y-Yprev)**2)
SQER = SQR/SQT #porcentagem da soma quadrática explicada pela regressão
SQEE = SQE/SQT #porcentagem da soma quadrática do erro

print("Porcentagem da soma quadrática explicada pela regressão =", SQER*100)
print("Porcentagem da soma quadrática do erro =", SQEE*100)

"""**2) Um atleta chamado Édão estava com dificuldade para dormir, assim decidiu fazer um estudo para tentar determinar quais fatores poderiam afetar seu sono. Selecionou algumas variáveis que imaginava serem relevantes para seu sono como tempo no celular, ingestão de açúcar e água, tempo de atividade física e ingestão de café.**"""

'''a - Você deve fazer uma regressão univariada ou multivariada? Justifique.
            Deve usufruir de uma Regressão Multivariada, pois oferece uma análise de diversas variáveis.

b - Faça a regressão por mínimos quadrados e observe os coeficientes, quais variáveis afetam o sono de maneira positiva, negativa ou não afetam?'''

import numpy as np
import matplotlib.pyplot as plt

X = np.array([
# resposta prevista (yprev)= constante + a.celular + b.açucar + c.água + d.ativ_fisica + e.copos_café
[	1	,	1	,	20	,	2, 1, 1]	,
[	1	,	1	,	40	,	2, 1, 1]	,
[	1	,	2	,	30	,	2, 1, 2]	,
[	1	,	2	,	20	,	2, 2, 2]	,
[	1	,	3	,	30	,	2, 2, 3]	,
[	1	,	3	,	40	,	3, 2, 3]	,
[	1	,	4	,	20	,	3, 3, 1]	,
[	1	,	4	,	30	,	3, 3, 1]	,
[	1	,	5	,	40	,	3, 3, 2]	,
[	1	,	5	,	30	,	3, 3, 2]	,
[	1	,	6	,	30	,	3, 3, 3]	,
[	1	,	6	,	30	,	3, 4, 3]	,
[	1	,	6	,	30	, 3, 2, 4]	,
[	1	,	3	,	30	,	3, 3, 4] ])

# Horas de sono
Y = np.array([
[	7.9	]	,
[	6.6	]	,
[	6.4	]	,
[	8.6	]	,
[	6.8	]	,
[	6.8	]	,
[	9.1	]	,
[	8.2	]	,
[	6.1	]	,
[	7.3	]	,
[	5.8	]	,
[	8.1	]	,
[	3.4	]	,
[	8.9	] ])

X_one = X
################################ Regressão Linear ###################
Xt = np.transpose(X)          # CRIA A TRANSPOSTA DA MATRIZ X (Xt)
XtX = np.matmul(Xt,X)         # MULTIPLICA Xt POR X
XtX_inv = np.linalg.inv(XtX)  # INVERTE (Xt*X)
XtY = np.matmul(Xt,Y)         # MULTIPLICA Xt POR Y
coef = np.matmul(XtX_inv,XtY) # TERMINA O CÁLCULO
print ("coeficientes: constante, celular, açúcar, água, atividade física, café","", coef)
#####################################################################
print("")
Yprev = np.matmul(X_one,coef)
predY = Yprev

########################################################## Gráficos com os dados #################################################
#################### Gráfico com os dados ##########################  Celular
plt.xlabel('Celular')
plt.ylabel('Horas de Sono')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados ########################## Açúcar
plt.xlabel('Açúcar')
plt.ylabel('Horas de Sono')
plt.scatter(X[:,2],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados ########################## Água
plt.xlabel('Água')
plt.ylabel('Horas de Sono')
plt.scatter(X[:,3],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados ########################## Atividade Física
plt.xlabel('Atividade Física')
plt.ylabel('Horas de Sono')
plt.scatter(X[:,4],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados ########################## Café
plt.xlabel('Café')
plt.ylabel('Horas de Sono')
plt.scatter(X[:,5],Y,c = 'blue', s=15, alpha=0.5)
plt.show()


################## Gráfico com os dados reais x previstos###########
plt.scatter(Y,predY,c = 'blue', s=15, alpha=0.5)
plt.xlabel('Horas real')
plt.ylabel('Horas prev')
plt.show ()
#################### Gráfico dos resíduos ##########################
residual = Y - Yprev
plt.scatter(Y,residual,c = 'red', s=15, alpha=0.5)
plt.xlabel('Y')
plt.ylabel('Residual')
plt.title('Residual')
plt.show()

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
#print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

''' c - Com o modelo matemático obtido por regressão tente prever as horas de sono nas seguintes condições:
      1h de celular, 40g de açúcar, 3L de água, 4h de atividade física e 3 copos de café.'''

#        constante         celular             açúcar               água       atividade física         café
# Sono = 7.83654034 - 1.13561889 . (1) - 0.06460999 . (40) + 0.33372138 . (3) + 2.04750449 . (4) - 0.14294198 . (3)
# Sono = 7.83654034 -       1.13561889 -      2.5843996    +    1.00116414    +     8.19001796   -     0.42882594

# Sono = 12.88 ??

"""**3) Professores Kakiboy e Édão decidiram fazer um bolo, mas infelizmente suas receitas não tiveram sucesso. O bolo sempre ficava duro e murcho... Assim, Kakiboy e Édão decidiram usar um método científico para fazer bolos melhores. Os dois ficaram sabendo que havia um grande sábio que poderia ajuda-los, o Mestre Gilberto Picanha. Os dois professores foram à terra dos pastos verdejantes e encontraram o grande Mestre. Depois de contar suas tristezas e frustrações culinárias ao mestre, ele disse:**

**- Vocês precisam estabelecer o que querem melhorar, isso será a resposta! Também é necessário encontrar fatores que afetam esta resposta, ou seja, que tenham correlação! Os fatores devem ser estudados para se compreender como alteram a resposta! Usem o método dos mínimos quadrados, encontrem os coeficientes do modelo, façam gráficos de dispersão dos erros, da resposta prevista pela real. Com todas estas instruções, Kakiboy e Édão, decidiram fazer os testes. Os dados obtidos estão indicados a seguir.**
"""

# Ajude Kaki e Édão a encontrar as variáveis que afetam a maciez do bolo de forma positiva e negativa, e as que são sem efeito.

import numpy as np
import matplotlib.pyplot as plt

X = np.array([
# resposta prevista (yprev)= constante + a.fermento + b.açúcar + c.água + d.temp_forno + e.temp_assando + f.chocolate
[	1	,	20	,	100	,	200, 180, 40, 50 ]	,
[	1	,	20	,	100	,	200, 180, 40, 50 ]	,
[	1	,	20	,	100	,	200, 180, 60, 50 ]	,
[	1	,	20	,	100	,	200, 180, 60, 100]	,
[	1	,	30	,	100	,	200, 180, 40, 100]	,
[	1	,	30	,	150	,	200, 200, 40, 100]	,
[	1	,	30	,	150	,	200, 200, 60, 50 ]	,
[	1	,	30	,	150	,	300, 180, 60, 50 ]	,
[	1	,	40	,	150	,	300, 180, 40, 50 ]	,
[	1	,	40	,	200	,	300, 200, 40, 100]	,
[	1	,	40	,	200	,	300, 200, 60, 100]	,
[	1	,	50	,	200	,	300, 180, 60, 100]	,
[	1	,	50	,	200	, 300, 200, 40, 50 ]	,
[	1	,	50	,	200	,	300, 180, 40, 50 ] ])

# Horas de sono
Y = np.array([
[	5.0	]	,
[	5.2	]	,
[	5.0	]	,
[	4.7	]	,
[	6.0	]	,
[	5.9	]	,
[	5.9	]	,
[	8.0	]	,
[	8.6	]	,
[	9.0	]	,
[	8.9	]	,
[	9.6	]	,
[	9.6	]	,
[	9.9	] ])

X_one = X
################################ Regressão Linear ###################
Xt = np.transpose(X)          # CRIA A TRANSPOSTA DA MATRIZ X (Xt)
XtX = np.matmul(Xt,X)         # MULTIPLICA Xt POR X
XtX_inv = np.linalg.inv(XtX)  # INVERTE (Xt*X)
XtY = np.matmul(Xt,Y)         # MULTIPLICA Xt POR Y
coef = np.matmul(XtX_inv,XtY) # TERMINA O CÁLCULO
print ("coeficientes: constante, fermento, açúcar, água, temp_forno, temp_assando e chocolate","", coef)
#####################################################################
print("")
Yprev = np.matmul(X_one,coef)
predY = Yprev

########################################################## Gráficos com os dados #################################################
#################### Gráfico com os dados ##########################  Fermento
plt.xlabel('Fermento')
plt.ylabel('Maciez do Bolo')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados ########################## Açúcar
plt.xlabel('Açúcar')
plt.ylabel('Maciez do Bolo')
plt.scatter(X[:,2],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados ########################## Água
plt.xlabel('Água')
plt.ylabel('Maciez do Bolo')
plt.scatter(X[:,3],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados ########################## Temperatura do Forno
plt.xlabel('Temperatura do Forno')
plt.ylabel('Maciez do Bolo')
plt.scatter(X[:,3],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados ########################## Tempo assando
plt.xlabel('Tempo assando')
plt.ylabel('Maciez do Bolo')
plt.scatter(X[:,3],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados ########################## Chocolate
plt.xlabel('Chocolate')
plt.ylabel('Maciez do Bolo')
plt.scatter(X[:,3],Y,c = 'blue', s=15, alpha=0.5)
plt.show()


################## Gráfico com os dados reais x previstos###########
plt.scatter(Y,predY,c = 'blue', s=15, alpha=0.5)
plt.xlabel('Maciez real')
plt.ylabel('Maciez prev')
plt.show ()
#################### Gráfico dos resíduos ##########################
residual = Y - Yprev
plt.scatter(Y,residual,c = 'red', s=15, alpha=0.5)
plt.xlabel('Y')
plt.ylabel('Residual')
plt.title('Residual')
plt.show()

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
#print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()