# -*- coding: utf-8 -*-
"""SIC - IA 7 - Somas Quadraticas Normalidades de Resíduos

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W9EpchuSa12Fmnl0ixmRtZNkfRMZh0M9
"""

# Calcular Somas Quadráticas

import numpy as np
import matplotlib.pyplot as plt

X = np.array ([

# y = b + ax
[	1	,	1]	,
[	1	,	2]	,
[	1	,	3]	,
[	1	,	4]	,
[	1	,	5]	,
[	1	,	6]	,
[	1	,	7]	,
[	1	,	8]	,
[	1	,	9]	,
[	1	,	10]	,
[	1	,	11]	,
[	1	,	12]	,
[	1	,	13]	,
[	1	,	14]	, ])

Y = np.array ([

[2.9]	 , # y =2x + 1
[5.3]	 ,
[7]	   ,
[9.2]	 ,
[10.8] ,
[13.2] ,
[15.1] ,
[17]	 ,
[19.1] ,
[21.2] ,
[23.7] ,
[25]	 ,
[27]   ,
[29.1] , ])

X_one = X
################################ Regressão Linear ###################
Xt = np.transpose(X)          # CRIA A TRANSPOSTA DA MATRIZ X (Xt)
XtX = np.matmul(Xt,X)         # MULTIPLICA Xt POR X
XtX_inv = np.linalg.inv(XtX)  # INVERTE (Xt*X)
XtY = np.matmul(Xt,Y)         # MULTIPLICA Xt POR Y
coef = np.matmul(XtX_inv,XtY) # TERMINA O CÁLCULO
print ("coeficientes b e a","", coef)
#####################################################################
print("")
Yprev = np.matmul(X_one,coef)
predY = Yprev
#################### Gráfico com os dados ##########################
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados e reta ###################
plt.plot(X[:,1],Yprev,color='green',linewidth=1) #espessura
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
################## Gráfico com os dados reais x previstos###########
plt.scatter(Y,predY,c = 'blue', s=15, alpha=0.5)
plt.xlabel('Yreal')
plt.ylabel('Yprev')
plt.show ()
#################### Gráfico dos resíduos ##########################
residual = Y - Yprev
plt.scatter(Y,residual,c = 'red', s=15, alpha=0.5)
plt.xlabel('Y')
plt.ylabel('Residual')
plt.title('Residual')
plt.show()

################ Cálculo das Somas Quadráticas ####################

######################## Calcular média do vetor Y ################
Ymedio = np.mean (Y)
print("valor médio do Y =", Ymedio)
#print(Ymedio)

######################### Soma Quadrática Total - SQT ############
SQT = sum((Y-Ymedio)**2)

######################## Soma Quadrática da Regressão - SQR ######
SQR =   sum(( Yprev - Ymedio)**2)

######################## Soma Quadrática dos erros - SQE #########
SQE =   sum ((Y-Yprev)**2)
SQER = SQR/SQT #porcentagem da soma quadrática explicada pela regressão
SQEE = SQE/SQT #porcentagem da soma quadrática do erro
print("Porcentagem da soma quadrática explicada pela regressão =", SQER*100)
print("Porcentagem da soma quadrática do erro =", SQEE*100)


#################### Gráfico normalidade dos resíduos ##############
import seaborn as sns
sns.distplot(residual, bins=50, color='green').set_title("Residual Histogram")
plt.show()

#import statsmodels.api as sm
#results = sm.OLS(Y, X).fit()
#A = np.identity(len(results.params))
#A = A[1:,:]
#print(results.f_test(A))
#print(results.summary())