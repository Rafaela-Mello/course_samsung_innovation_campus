# -*- coding: utf-8 -*-
"""SIC - IA 2 - Regressão Linear

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oRRrsf8JYMBQeCW2vFltNb-wr4-b4_Dw
"""

# Produção de carro X Ganho de peso

import numpy as np # para matrizes
import matplotlib.pyplot as plt # para gráficos

# Geração do modelo coef = inv(Xt*X)*(Xt*Y)
# O MODELO MATEMÁTICO POSSUI UMA CONSTANTE    Y= AX + B
# A COLUNA COM 1´s GARANTE QUE A CONSTANTE B SEJA DETERMINADA
# O MODELO FICARÁ Y = B + AX POR CONTA DA PRIMEIRA COLUNA

# X produção de carros
X = np.array([
[ 1, 78],
[ 1, 74],
[ 1, 69],
[	1, 72],
[	1, 77],
[	1, 71],
[	1, 80],
[	1, 75],
[	1, 68],
[	1, 78],
[	1, 76],
[	1, 79],
[	1, 71],
[	1, 69], ])

# Y peso do Gilberto
Y = np.array([
[	110	],
[	125	],
[	130	],
[	144	],
[	142	],
[	140	],
[	158	],
[	165	],
[	162	],
[	176	],
[	182	],
[	181	],
[	190	],
[	185	], ])

X_one = X
################################ Regressão Linear ###################
Xt = np.transpose(X)          # CRIA A TRANSPOSTA DA MATRIZ X (Xt)
XtX = np.matmul(Xt,X)         # MULTIPLICA Xt POR X
XtX_inv = np.linalg.inv(XtX)  # INVERTE (Xt*X)
XtY = np.matmul(Xt,Y)         # MULTIPLICA Xt POR Y
coef = np.matmul(XtX_inv,XtY) # TERMINA O CÁLCULO
print ("coeficientes b e a","", coef)
#####################################################################
print("")
Yprev = np.matmul(X_one,coef)
predY = Yprev
#################### Gráfico com os dados ##########################
plt.xlabel('Carros')
plt.ylabel('Peso')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados e reta ###################
plt.plot(X[:,1],Yprev,color='green',linewidth=1) #espessura
plt.xlabel('Carro')
plt.ylabel('Peso')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
################## Gráfico com os dados reais x previstos###########
#plt.scatter(Y,predY,c = 'blue', s=15, alpha=0.5)
#plt.xlabel('Peso real')
#plt.ylabel('Peso prev')
#plt.show ()

#################### Gráfico dos resíduos ##########################
#residual = Y - Yprev
#plt.scatter(Y,residual,c = 'red', s=15, alpha=0.5)
#plt.xlabel('Y')
#plt.ylabel('Residual')
#plt.title('Residual')
#plt.show()

print("Valores previstos pelo modelo:", predY)
print("Valores reais:", Y)
print("Diferença entres Valores previstos e reais (erro):",Y - predY)
print("Soma dos erros", sum(Y - predY))

# Área X Ganho de peso

import numpy as np # para matrizes
import matplotlib.pyplot as plt # para gráficos

# Geração do modelo   coef = inv(Xt*X)*(Xt*Y)
# O MODELO MATEMÁTICO POSSUI UMA CONSTANTE    Y = AX + B (constante)
# A COLUNA COM 1´s GARANTE QUE A CONSTANTE B SEJA DETERMINADA
# O MODELO FICARÁ Y = B + AX POR CONTA DA PRIMEIRA COLUNA

# y = b + ax
# y = -80,85 + 0,777.x

# X área
X = np.array([
[ 1, 250],
[ 1, 270],
[ 1, 272],
[	1, 280],
[	1, 285],
[	1, 290],
[	1, 300],
[	1, 308],
[	1, 315],
[	1, 330],
[	1, 335],
[	1, 340],
[	1, 345],
[	1, 350], ])

# Y peso do Gilberto
Y = np.array([
[	110 ],
[	125	],
[	130	],
[	144	],
[	142	],
[	140	],
[	158	],
[	165	],
[	162	],
[	176	],
[	182	],
[	181	],
[	190	],
[	185	], ])

X_one = X

# coef (a,b) = inv(Xt*X)*(Xt*Y)
################################ Regressão Linear ###################
Xt = np.transpose(X)          # CRIA A TRANSPOSTA DA MATRIZ X (Xt)
XtX = np.matmul(Xt,X)         # MULTIPLICA Xt POR X
XtX_inv = np.linalg.inv(XtX)  # INVERTE (Xt*X)
XtY = np.matmul(Xt,Y)         # MULTIPLICA Xt POR Y
coef = np.matmul(XtX_inv,XtY) # TERMINA O CÁLCULO
print ("coeficientes b e a", coef)
#####################################################################
Yprev = np.matmul(X,coef)   # coef*X
predY = Yprev
#################### Gráfico com os dados ##########################
plt.xlabel('Área')
plt.ylabel('Peso')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados e reta ###################
plt.plot(X[:,1],Yprev,color='green',linewidth=1) #espessura
plt.xlabel('Área')
plt.ylabel('Peso')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
################## Gráfico com os dados reais x previstos###########
#plt.scatter(Y,predY,c = 'blue', s=15, alpha=0.5)
#plt.xlabel('Peso real')
#plt.ylabel('Peso prev')
#plt.show ()
#################### Gráfico dos resíduos ##########################
#residual = Y - Yprev
#plt.scatter(Y,residual,c = 'red', s=15, alpha=0.5)
#plt.xlabel('Y')
#plt.ylabel('Residual')
#plt.title('Residual')
#plt.show()

print("Valores previstos pelo modelo:", predY)
print("Valores reais:", Y)
print("Diferença entres Valores previstos e reais (erro):",Y - predY)
print("Soma dos erros", sum(Y - predY))

# Ganho de peso x área - TESTES

import numpy as np # para matrizes
import matplotlib.pyplot as plt # para gráficos

# Geração do modelo   coef = inv(Xt*X)*(Xt*Y)
# O MODELO MATEMÁTICO POSSUI UMA CONSTANTE    Y = AX + B
# A COLUNA COM 1´s GARANTE QUE A CONSTANTE B SEJA DETERMINADA
# O MODELO FICARÁ Y = B + AX POR CONTA DA PRIMEIRA COLUNA

# X área
X = np.array([
[ 1, 1],
[ 1, 2],
[ 1, 3],
[	1, 4],
[	1, 5], ])

# Y peso do Gilberto
Y = np.array([
[	3	],
[	4	],
[	5	],
[	9	],
[	12	], ])

X_one = X

# coef (a,b) = inv(Xt*X)*(Xt*Y)
################################ Regressão Linear ###################
Xt = np.transpose(X)          # CRIA A TRANSPOSTA DA MATRIZ X (Xt)
XtX = np.matmul(Xt,X)         # MULTIPLICA Xt POR X
XtX_inv = np.linalg.inv(XtX)  # INVERTE (Xt*X)
XtY = np.matmul(Xt,Y)         # MULTIPLICA Xt POR Y
coef = np.matmul(XtX_inv,XtY) # TERMINA O CÁLCULO
print ("coeficientes b e a", coef)
#####################################################################
Yprev = np.matmul(X,coef)   # coef*X
predY = Yprev
#################### Gráfico com os dados ##########################
plt.xlabel('Área')
plt.ylabel('Peso')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados e reta ###################
plt.plot(X[:,1],Yprev,color='green',linewidth=1) #espessura
plt.xlabel('Área')
plt.ylabel('Peso')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
################## Gráfico com os dados reais x previstos###########
#plt.scatter(Y,predY,c = 'blue', s=15, alpha=0.5)
#plt.xlabel('Peso real')
#plt.ylabel('Peso prev')
#plt.show ()
#################### Gráfico dos resíduos ##########################
#residual = Y - Yprev
#plt.scatter(Y,residual,c = 'red', s=15, alpha=0.5)
#plt.xlabel('Y')
#plt.ylabel('Residual')
#plt.title('Residual')
#plt.show()

print("Valores previstos pelo modelo:", predY)
print("Valores reais:", Y)
print("Diferença entres Valores previstos e reais (erro):",Y - predY)
print("Soma dos erros", sum(Y - predY))