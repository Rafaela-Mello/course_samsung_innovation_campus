# -*- coding: utf-8 -*-
"""SIC - IA 4 - Regressão Linear

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ubKesfum3qht2Or9TE7Iiw_z5A76kXWn
"""

# Venda de carros popular 0 km em função da renda
# tentativa 1: imaginando que a relação é linear

import numpy as np
import matplotlib.pyplot as plt

# Geração do modelo   coef = inv(Xt*X)*(Xt*Y)
# O MODELO MATEMÁTICO POSSUI UMA CONSTANTE    Y= AX + B
# A COLUNA COM 1´s GARANTE QUE A CONSTANTE B SEJA DETERMINADA
# O MODELO FICARÁ Y = B + AX POR CONTA DA PRIMEIRA COLUNA

X = np.array([
# Salário em milhares de R$
# y = b + ax
[	1	,	3],
[	1	,	4],
[	1	,	5],
[	1	,	6],
[	1	,	7],
[	1	,	8],
[	1	,	9],
[	1	,	10],
[	1	,	11],
[	1	,	12],
[	1	,	13],
[	1	,	14],
[	1	,	15],
[	1	,	16], ])

# Venda de carros 0 km populares em milhares de unidade
Y = np.array([
[15],
[29],
[41],
[48],
[56],
[61],
[63],
[65],
[64],
[60],
[56],
[48],
[41],
[30], ])

X_one = X
################################ Regressão Linear ###################
Xt = np.transpose(X)          # CRIA A TRANSPOSTA DA MATRIZ X (Xt)
XtX = np.matmul(Xt,X)         # MULTIPLICA Xt POR X
XtX_inv = np.linalg.inv(XtX)  # INVERTE (Xt*X)
XtY = np.matmul(Xt,Y)         # MULTIPLICA Xt POR Y
coef = np.matmul(XtX_inv,XtY) # TERMINA O CÁLCULO
print ("coeficientes b e a","", coef)
#####################################################################
print("")
Yprev = np.matmul(X_one,coef)
predY = Yprev
#################### Gráfico com os dados ##########################
plt.xlabel('Salário')
plt.ylabel('Carros')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados e reta ###################
plt.plot(X[:,1],Yprev,color='green',linewidth=1) #espessura
plt.xlabel('Salário')
plt.ylabel('Carros')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
################## Gráfico com os dados reais x previstos###########
plt.scatter(Y,predY,c = 'blue', s=15, alpha=0.5)
plt.xlabel('Carros real')
plt.ylabel('Carros prev')
plt.show ()
#################### Gráfico dos resíduos ##########################
residual = Y - Yprev
plt.scatter(Y,residual,c = 'red', s=15, alpha=0.5)
plt.xlabel('Y')
plt.ylabel('Residual')
plt.title('Residual')
plt.show()

#print("Valores previstos pelo modelo:", predY)
#print("Valores reais:", Y)
#print("Diferença entres Valores previstos e reais (erro):",Y - predY)
#print("Soma dos erros", sum(Y - predY))

# Venda de carros popular 0 km em função da renda
# tentativa 2: imaginando que a relação é quadrática

import numpy as np
import matplotlib.pyplot as plt

#Geração do modelo   coef = inv(Xt*X)*(Xt*Y)
# O MODELO MATEMÁTICO POSSUI UMA CONSTANTE    Y= AX + B
# A COLUNA COM 1´s GARANTE QUE A CONSTANTE B SEJA DETERMINADA
# O MODELO FICARÁ Y = B + AX POR CONTA DA PRIMEIRA COLUNA

X = np.array([
# Salário em milhares de R$
# y = ax² + bx + c
# y = c + bx + ax²
[	1	,	3,	9],
[	1	,	4	, 16],
[	1	,	5	, 25],
[	1	,	6	, 36],
[	1	,	7	, 49],
[	1	,	8	, 64],
[	1	,	9	, 81],
[	1	,	10, 100],
[	1	,	11, 121],
[	1	,	12, 144],
[	1	,	13, 169],
[	1	,	14,	196],
[	1	,	15, 225],
[	1	,	16, 256], ])

# Venda de carros 0 km em milhares de unidade
Y = np.array([
[15]	,
[29],
[41],
[48],
[56],
[61],
[63],
[65],
[64],
[60],
[56],
[48],
[41],
[30], ])

X_one = X
################################ Regressão Linear ###################
Xt = np.transpose(X)          # CRIA A TRANSPOSTA DA MATRIZ X (Xt)
XtX = np.matmul(Xt,X)         # MULTIPLICA Xt POR X
XtX_inv = np.linalg.inv(XtX)  # INVERTE (Xt*X)
XtY = np.matmul(Xt,Y)         # MULTIPLICA Xt POR Y
coef = np.matmul(XtX_inv,XtY) # TERMINA O CÁLCULO
print ("coeficientes c, b a de ax**2 + b*x + c ","", coef)
#####################################################################
print("")
Yprev = np.matmul(X_one,coef)
predY = Yprev
#################### Gráfico com os dados ##########################
plt.xlabel('Salário')
plt.ylabel('Carros')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados e reta ###################
plt.plot(X[:,1],Yprev,color='green',linewidth=1) #espessura
plt.xlabel('Salário')
plt.ylabel('Carros')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
################## Gráfico com os dados reais x previstos###########
plt.scatter(Y,predY,c = 'blue', s=15, alpha=0.5)
plt.xlabel('Carros real')
plt.ylabel('Carros prev')
plt.show ()
#################### Gráfico dos resíduos ##########################
residual = Y - Yprev
plt.scatter(Y,residual,c = 'red', s=15, alpha=0.5)
plt.xlabel('Y')
plt.ylabel('Residual')
plt.title('Residual')
plt.show()

#print("Valores previstos pelo modelo:", predY)
#print("Valores reais:", Y)
#print("Diferença entres Valores previstos e reais (erro):",Y - predY)
#print("Soma dos erros", sum(Y - predY))

# y = c + bx + ax²
# y = -34,48  + 19,7612.(3) -0,98489.(3²)
# y = -34,48  + 19,7612.(4) -0,98489.(4²)

# Previsão do tempo
# Regressão multivariada

import numpy as np
import matplotlib.pyplot as plt

#Geração do modelo   coef = inv(Xt*X)*(Xt*Y)
# O MODELO MATEMÁTICO POSSUI UMA CONSTANTE    Y= AX + B
# A COLUNA COM 1´s GARANTE QUE A CONSTANTE B SEJA DETERMINADA
# O MODELO FICARÁ Y = B + AX POR CONTA DA PRIMEIRA COLUNA

X = np.array([
# constante umidade temperatura velocidade do vento
# resposta prevista (yprev)= constante + a.umidade + b.temperatura + c. velocidade do vento
[	1	,	20	,		15		,		10	]	,
[	1	,	20	,		15		,		20	]	,
[	1	,	20	,		15		,		30	]	,
[	1	,	20	,		15		,		40	]	,
[	1	,	20	,		15		,		50	]	,
[	1	,	20	,		20		,		10	]	,
[	1	,	20	,		20		,		20	]	,
[	1	,	20	,		20		,		30	]	,
[	1	,	20	,		20		,		40	]	,
[	1	,	20	,		20		,		50	]	,
[	1	,	20	,		25		,		10	]	,
[	1	,	20	,		25		,		20	]	,
[	1	,	20	,		25		,		30	]	,
[	1	,	20	,		25		,		40	]	,
[	1	,	20	,		25		,		50	]	,
[	1	,	20	,		30		,		10	]	,
[	1	,	20	,		30		,		20	]	,
[	1	,	20	,		30		,		30	]	,
[	1	,	20	,		30		,		40	]	,
[	1	,	20	,		30		,		50	]	,
[	1	,	20	,		35		,		10	]	,
[	1	,	20	,		35		,		20	]	,
[	1	,	20	,		35		,		30	]	,
[	1	,	20	,		35		,		40	]	,
[	1	,	20	,		35		,		50	]	,
[	1	,	50	,		15		,		10	]	,
[	1	,	50	,		15		,		20	]	,
[	1	,	50	,		15		,		30	]	,
[	1	,	50	,		15		,		40	]	,
[	1	,	50	,		15		,		50	]	,
[	1	,	50	,		20		,		10	]	,
[	1	,	50	,		20		,		20	]	,
[	1	,	50	,		20		,		30	]	,
[	1	,	50	,		20		,		40	]	,
[	1	,	50	,		20		,		50	]	,
[	1	,	50	,		25		,		10	]	,
[	1	,	50	,		25		,		20	]	,
[	1	,	50	,		25		,		30	]	,
[	1	,	50	,		25		,		40	]	,
[	1	,	50	,		25		,		50	]	,
[	1	,	50	,		30		,		10	]	,
[	1	,	50	,		30		,		20	]	,
[	1	,	50	,		30		,		30	]	,
[	1	,	50	,		30		,		40	]	,
[	1	,	50	,		30		,		50	]	,
[	1	,	50	,		35		,		10	]	,
[	1	,	50	,		35		,		20	]	,
[	1	,	50	,		35		,		30	]	,
[	1	,	50	,		35		,		40	]	,
[	1	,	50	,		35		,		50	]	,
[	1	,	50	,		15		,		10	]	,
[	1	,	50	,		15		,		20	]	,
[	1	,	50	,		15		,		30	]	,
[	1	,	50	,		15		,		40	]	,
[	1	,	50	,		15		,		50	]	,
[	1	,	50	,		20		,		10	]	,
[	1	,	50	,		20		,		20	]	,
[	1	,	50	,		20		,		30	]	,
[	1	,	50	,		20		,		40	]	,
[	1	,	50	,		20		,		50	]	,
[	1	,	50	,		25		,		10	]	,
[	1	,	50	,		25		,		20	]	,
[	1	,	50	,		25		,		30	]	,
[	1	,	50	,		25		,		40	]	,
[	1	,	50	,		25		,		50	]	,
[	1	,	50	,		30		,		10	]	,
[	1	,	50	,		30		,		20	]	,
[	1	,	50	,		30		,		30	]	,
[	1	,	50	,		30		,		40	]	,
[	1	,	50	,		30		,		50	]	,
[	1	,	50	,		35		,		10	]	,
[	1	,	50	,		35		,		20	]	,
[	1	,	50	,		35		,		30	]	,
[	1	,	50	,		35		,		40	]	,
[	1	,	50	,		35		,		50	]	,
[	1	,	60	,		15		,		10	]	,
[	1	,	60	,		15		,		20	]	,
[	1	,	60	,		15		,		30	]	,
[	1	,	60	,		15		,		40	]	,
[	1	,	60	,		15		,		50	]	,
[	1	,	60	,		20		,		10	]	,
[	1	,	60	,		20		,		20	]	,
[	1	,	60	,		20		,		30	]	,
[	1	,	60	,		20		,		40	]	,
[	1	,	60	,		20		,		50	]	,
[	1	,	60	,		25		,		10	]	,
[	1	,	60	,		25		,		20	]	,
[	1	,	60	,		25		,		30	]	,
[	1	,	60	,		25		,		40	]	,
[	1	,	60	,		25		,		50	]	,
[	1	,	60	,		30		,		10	]	,
[	1	,	60	,		30		,		20	]	,
[	1	,	60	,		30		,		30	]	,
[	1	,	60	,		30		,		40	]	,
[	1	,	60	,		30		,		50	]	,
[	1	,	60	,		35		,		10	]	,
[	1	,	60	,		35		,		20	]	,
[	1	,	60	,		35		,		30	]	,
[	1	,	60	,		35		,		40	]	,
[	1	,	60	,		35		,		50	]	,
[	1	,	60	,		15		,		10	]	,
[	1	,	60	,		15		,		20	]	,
[	1	,	60	,		15		,		30	]	,
[	1	,	60	,		15		,		40	]	,
[	1	,	60	,		15		,		50	]	,
[	1	,	60	,		20		,		10	]	,
[	1	,	60	,		20		,		20	]	,
[	1	,	60	,		20		,		30	]	,
[	1	,	60	,		20		,		40	]	,
[	1	,	60	,		20		,		50	]	,
[	1	,	60	,		25		,		10	]	,
[	1	,	60	,		25		,		20	]	,
[	1	,	60	,		25		,		30	]	,
[	1	,	60	,		25		,		40	]	,
[	1	,	60	,		25		,		50	]	,
[	1	,	60	,		30		,		10	]	,
[	1	,	60	,		30		,		20	]	,
[	1	,	60	,		30		,		30	]	,
[	1	,	60	,		30		,		40	]	,
[	1	,	60	,		30		,		50	]	,
[	1	,	60	,		35		,		10	]	,
[	1	,	60	,		35		,		20	]	,
[	1	,	60	,		35		,		30	]	,
[	1	,	60	,		35		,		40	]	,
[	1	,	60	,		35		,		50	]	, ])

# Probabilidade de chuva
Y = np.array([
[	35	]	,
[	32	]	,
[	29	]	,
[	24	]	,
[	20	]	,
[	40	]	,
[	38	]	,
[	35	]	,
[	30	]	,
[	27	]	,
[	48	]	,
[	43	]	,
[	42	]	,
[	35	]	,
[	32	]	,
[	54	]	,
[	51	]	,
[	46	]	,
[	40	]	,
[	38	]	,
[	61	]	,
[	56	]	,
[	53	]	,
[	48	]	,
[	45	]	,
[	67	]	,
[	62	]	,
[	52	]	,
[	54	]	,
[	51	]	,
[	70	]	,
[	69	]	,
[	65	]	,
[	60	]	,
[	56	]	,
[	79	]	,
[	74	]	,
[	72	]	,
[	63	]	,
[	62	]	,
[	84	]	,
[	80	]	,
[	77	]	,
[	70	]	,
[	68	]	,
[	91	]	,
[	86	]	,
[	82	]	,
[	77	]	,
[	74	]	,
[	64	]	,
[	62	]	,
[	55	]	,
[	54	]	,
[	57	]	,
[	72	]	,
[	69	]	,
[	64	]	,
[	61	]	,
[	53	]	,
[	78	]	,
[	74	]	,
[	71	]	,
[	66	]	,
[	60	]	,
[	84	]	,
[	80	]	,
[	78	]	,
[	72	]	,
[	69	]	,
[	90	]	,
[	84	]	,
[	82	]	,
[	78	]	,
[	75	]	,
[	76	]	,
[	72	]	,
[	69	]	,
[	64	]	,
[	61	]	,
[	82	]	,
[	78	]	,
[	74	]	,
[	73	]	,
[	66	]	,
[	89	]	,
[	84	]	,
[	80	]	,
[	74	]	,
[	72	]	,
[	95	]	,
[	90	]	,
[	86	]	,
[	80	]	,
[	78	]	,
[	100	]	,
[	96	]	,
[	93	]	,
[	88	]	,
[	81	]	,
[	76	]	,
[	71	]	,
[	68	]	,
[	65	]	,
[	60	]	,
[	83	]	,
[	78	]	,
[	75	]	,
[	70	]	,
[	65	]	,
[	88	]	,
[	84	]	,
[	80	]	,
[	77	]	,
[	72	]	,
[	92	]	,
[	90	]	,
[	86	]	,
[	81	]	,
[	78	]	,
[	100	]	,
[	96	]	,
[	92	]	,
[	88	]	,
[	81	]	, ])

X_one = X
################################ Regressão Linear ###################
Xt = np.transpose(X)          # CRIA A TRANSPOSTA DA MATRIZ X (Xt)
XtX = np.matmul(Xt,X)         # MULTIPLICA Xt POR X
XtX_inv = np.linalg.inv(XtX)  # INVERTE (Xt*X)
XtY = np.matmul(Xt,Y)         # MULTIPLICA Xt POR Y
coef = np.matmul(XtX_inv,XtY) # TERMINA O CÁLCULO
print ("coeficientes: constante umidade temperatura velocidade do vento","", coef)
#####################################################################
print("")
Yprev = np.matmul(X_one,coef)
predY = Yprev
########################################################## Gráficos com os dados #################################################
#################### Gráfico com os dados ##########################  Umidade
plt.xlabel('Umidade')
plt.ylabel('Prob. de chuva')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados ########################## Temperatura
plt.xlabel('Temperatura')
plt.ylabel('Prob. de chuva')
plt.scatter(X[:,2],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados ########################## Vento
plt.xlabel('Velocidade do vento')
plt.ylabel('Prob. de chuva')
plt.scatter(X[:,3],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados e reta ###################
#plt.plot(X[:,1],Yprev,color='green',linewidth=1) #espessura
#plt.xlabel('Salário')
#plt.ylabel('Carros')
#plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
#plt.show()
################## Gráfico com os dados reais x previstos###########
plt.scatter(Y,predY,c = 'blue', s=15, alpha=0.5)
plt.xlabel('Prob real')
plt.ylabel('Prob prev')
plt.show ()
#################### Gráfico dos resíduos ##########################
residual = Y - Yprev
plt.scatter(Y,residual,c = 'red', s=15, alpha=0.5)
plt.xlabel('Y')
plt.ylabel('Residual')
plt.title('Residual')
plt.show()
########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

#print("Valores previstos pelo modelo:", predY)
#print("Valores reais:", Y)
#print("Diferença entres Valores previstos e reais (erro):",Y - predY)
#print("Soma dos erros", sum(Y - predY))

################## MODELO ########################################################
# Prob de chuva = 2,3942 + 0,99634.umidade + 1,1904.temperatura - 0,4004.velocidada
# intevalos estudados
# umidade:  20 - 60
# temperatura: 15 -35
# velocidade: 10 - 50

#exemplo, um dia com as condições umidade 35%, temperatura 30°C e velocidade 45 km/h
# resposta prevista= constante +     a. (umidade) +   b.  temperatura + c. velocidade
# Prob de chuva =     2,3942   +  0,99634.   (35) +  1,1904 . 30     - 0,4004  .45
# Prob de chuva = 54,96 %
###################################################################################